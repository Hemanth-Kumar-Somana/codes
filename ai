#include <stdio.h>
#include <string.h>

int main() {
    char text[100];
    int key;
    
    printf("Enter a message: ");
    gets(text);  // simple input for this example
    
    printf("Enter the key (an integer): ");
    scanf("%d", &key);
    
    char encrypted[100], decrypted[100];
    strcpy(encrypted, text);
    strcpy(decrypted, text);
    
    // Encryption
    for (int i = 0; i < strlen(encrypted); i++) {
        char ch = encrypted[i];
        if (ch >= 'a' && ch <= 'z')
            ch = (ch - 'a' + key) % 26 + 'a';
        else if (ch >= 'A' && ch <= 'Z')
            ch = (ch - 'A' + key) % 26 + 'A';
        encrypted[i] = ch;
    }

    // Decryption
    for (int i = 0; i < strlen(decrypted); i++) {
        char ch = encrypted[i];
        if (ch >= 'a' && ch <= 'z')
            ch = (ch - 'a' - key + 26) % 26 + 'a';
        else if (ch >= 'A' && ch <= 'Z')
            ch = (ch - 'A' - key + 26) % 26 + 'A';
        decrypted[i] = ch;
    }

    printf("Encrypted message: %s\n", encrypted);
    printf("Decrypted message: %s\n", decrypted);
    
    return 0;
}
------------------------------------------------------------------------

2. TRANSPOSITION (RAIL FIENCE)
#include <stdio.h>
#include <string.h>

int main(){
    char text[100];
    int rails;
    printf("Enter plaintext (max 99 chars): ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = 0;

    printf("Enter number of rails: ");
    scanf("%d", &rails);

    int len = strlen(text), i, j, dir = 0, r = 0;
    char rail[10][100];
    for(i=0;i<rails;i++) for(j=0;j<len;j++) rail[i][j]='\n';

    for(i=0;i<len;i++){
        rail[r][i] = text[i];
        if(r==0) dir = 1;
        else if(r==rails-1) dir = 0;
        r += dir ? 1 : -1;
    }

    printf("\nPlaintext: %s\n", text);
    printf("Rails: %d\n", rails);
    printf("Ciphertext: ");
    for(i=0;i<rails;i++)
        for(j=0;j<len;j++)
            if(rail[i][j] != '\n') printf("%c", rail[i][j]);
    printf("\n");
    return 0;
}
------------------------------------------------------------------------

ROW TRANSPOSITION CIPHER


#include <stdio.h>
#include <string.h>

int main(){
    char pt[100], key[100];
    printf("Enter plaintext (max 99 chars): ");
    fgets(pt, sizeof pt, stdin); pt[strcspn(pt,"\n")]=0;
    printf("Enter key (e.g., a number or word like 312 or KEY, max 99 chars): ");
    fgets(key, sizeof key, stdin); key[strcspn(key,"\n")]=0;

    int L=strlen(pt), c=strlen(key), r=(L + c - 1)/c;
    char mat[20][20];
    for(int i=0;i<r*c;i++) mat[i/c][i%c] = (i < L) ? pt[i] : 'X';

    /* build array of (keychar, index) and sort by keychar then index */
    char kch[100]; int idx[100];
    for(int i=0;i<c;i++){ kch[i]=key[i]; idx[i]=i; }
    for(int i=0;i<c-1;i++){
        int m=i;
        for(int j=i+1;j<c;j++)
            if(kch[j] < kch[m] || (kch[j]==kch[m] && idx[j] < idx[m])) m=j;
        if(m!=i){ char t=kch[i]; kch[i]=kch[m]; kch[m]=t; int u=idx[i]; idx[i]=idx[m]; idx[m]=u; }
    }

    printf("\nPlaintext: %s\n", pt);
    printf("Key: %s\n", key);
    printf("Ciphertext: ");
    for(int p=0;p<c;p++){
        int col = idx[p];
        for(int row=0; row<r; row++) putchar(mat[row][col]);
    }
    printf("\n");
    return 0;
}
